/* Copyright (c) 2023 - 2023, Oracle and/or its affiliates. All rights reserved. */
/* Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/. */

// 
// @file facts.dl
//
// Defines the input fact representation for the abstract represesentation of a CI pipeline.
//

#ifndef _FACTS_DL_
#define _FACTS_DL_

.type WriteStmt <: symbol
.type ScopeId <: symbol
.type Block <: symbol
.type DataSourceId <: symbol

// Representation of a write/read location, consisting of a representation of the kind
// of location and its identity, further distinguished by its containing scope.
.type Location = [ scope: ScopeId, loc: LocationSpecifier ]

// Representation of various kinds of write/read locations and their identity.
.type LocationSpecifier =
    // Filesystem location, identified by file path.
    Filesystem { path: Value }

    // Variable location, identified by name.
    | Variable { name: Value }

    // Artifact location, identified by artifact name and
    // the file path of the specific file contained within.
    | Artifact { name: Value, file: Value }

// Representation of a value or expression.
.type Value =
    // A concrete, literal string.
    StringLiteral { str: symbol }

    // A value read from some location.
    | Read { loc: Location }

    // A representation of arbitrary data, with no information on its content,
    // only the identity of where/when it originated.
    | ArbitraryNewData { at: DataSourceId }

    // A unary operator on another value, semantics vary by operator used.
    | UnaryStringOp { operator: UnaryStringOperator, operand: Value }

    // A binary operator on two other values, semantics vary by operator used.
    | BinaryStringOp { operator: BinaryStringOperator, operand1: Value, operand2: Value }

    // An induction var, this is valid only in WriteForEach statements, and
    // represents a placeholder to be replaced with each successive element value.
    | InductionVar { }

    // A unary operator that produces some value from/about a location, semantics
    // vary by operator.
    | UnaryLocationReadOp { operator: UnaryLocationReadOperator, operand: Location }

// Operators available for unary operator expressions.
.type UnaryStringOperator = 
    // Extracts the base name of a file path string.
    BaseName { }

// Operators available for binary operator expressions.
.type BinaryStringOperator = 
    // Concatenates the two string operands.
    StringConcat { }

// Operators available for unary location operators.
.type UnaryLocationReadOperator = 
    // Extracts all the file names contained within the given location.
    // (currently only supports getting the files contained within an artifact)
    FileList { }

    // Represents any file path that is under/within a given directory.
    | AnyFileUnderDirectory { }
    
.type YamlSpecType = GitHubAction { }

.type OperationKind = 
    YamlSpec { type: YamlSpecType }
    | ShellCommand { }


.type YamlFieldAccessPath = [ field: symbol, rest: OptionalYamlFieldAccessPath ]

.type OptionalYamlFieldAccessPath =
    NoYamlFields { }
    | SomeYamlFields { list: YamlFieldAccessPath }

.type OptionalValue = NoValue { }
                    | SomeValue { value: Value }

// A write statement, which writes a value to a location.
.decl Write(writeStmt:WriteStmt, to:Location, value:Value)

// A composite write statement, which, for each element of a collection, performs a
// write to a location with a value, where both have any InductionVar subexprs replaced
// with each successive element value.
.decl WriteForEach(writeStmt:WriteStmt, collection:Value, to:Location, value:Value)

// Inheritance relation between scopes, such that everything in fromScope is also
// accessible in toScope, but not the reverse.
.decl ScopeDirectlyInheritsFrom(fromScope:ScopeId, toScope:ScopeId)


//
// Control flow representation
//
// Control flow is represented via four kinds of blocks, operation blocks, which represent some
// high-level operation, and contain within them a single sub block, sequential blocks, which specify a
// control flow graph of blocks, scheduler blocks, which specify dependency constraints
// between a collection of blocks (such that all member blocks are executed once 
// each in some satisfying order), and statement blocks, which contain a set of statements (e.g. writes),
// that are executed simultaneously when the block executes. A top-level block represents the entire program.
//

// Block is a sequential block.
.decl SequentialBlock(block:Block)

// Entry node of sequential block.
.decl SequentialBlockEntry(block:Block, element:Block)

// Successor control flow edge between elements of a sequential block.
.decl SequentialBlockEdge(block:Block, element:Block, nextElement:Block)


// Block is a scheduler block.
.decl SchedulerBlock(block:Block)

// Member of scheduler block.
.decl SchedulerBlockMember(block:Block, element:Block)

// Dependency relation between members of a scheduler block, such that the preceding element
// must be executed before element is run.
.decl SchedulerBlockDependency(block:Block, element:Block, precedingElement:Block)


// Block is an operation block
.decl OperationBlock(block:Block)

// Operation block contains a sub block
.decl OperationSubBlock(block:Block, subBlock:Block)

// Operation block type
.decl OperationType(block:Block, operationType:OperationKind)

// Value representation of a shell command argument, if representable, otherwise NoValue
.decl OperationShellCommandArg(block:Block, index:number, value:OptionalValue)

// Value representation of a yaml field value, if representable, otherwise NoValue
.decl OperationYamlSpecField(block:Block, accessPath:YamlFieldAccessPath, value:OptionalValue)


// Block is a statement block
.decl StatementBlock(block:Block)

// Statement block contains statement
.decl StatementBlockMember(block:Block, writeStmt:WriteStmt)

// A single top-level block represents the entire program.
.decl TopLevelBlock(block:Block)

#endif